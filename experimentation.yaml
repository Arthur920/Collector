receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317

  hostmetrics:
    scrapers:
      cpu:

  # docker_stats:
  #   endpoint: unix:///var/run/docker.sock
  #   collection_interval: 5s
  #   timeout: 20s
  #   api_version: "1.25"
    # container_labels_to_metric_labels: Used to add labels/metadata to data for filtering etc later on e.g "Service A"
    #   my.container.label: my-metric-label
    #   my.other.container.label: my-other-metric-label
    
    # env_vars_to_metric_labels: Used to add environment data e.g. "production" "v.3.14"
    #   MY_ENVIRONMENT_VARIABLE: my-metric-label
    #   MY_OTHER_ENVIRONMENT_VARIABLE: my-other-metric-label
    
    # excluded_images: can be used to exclude images from monitoring using strings, regex or globs
      
    # metrics: 
    #   container.uptime:
    #     enabled: true

  filelog:
    include: [ /var/lib/docker/containers/ ]

exporters:
  prometheus:
    endpoint: "0.0.0.0:8889"
    const_labels:
      label1: value1

  debug:
    verbosity: normal
    sampling_initial: 0
    sampling_thereafter: 10

  zipkin:
    endpoint: "http://zipkin-all-in-one:  /api/v2/spans"
    format: proto

  otlp:
    endpoint: jaeger-all-in-one:4317
    tls:
      insecure: true

processors:
  batch:

  resourcedetection/docker:
    detectors: [env, docker]
    timeout: 2s
    override: false


extensions:
  health_check:
  pprof:
    endpoint: :1888
  zpages:
    endpoint: :55679

service:
  extensions: [pprof, zpages, health_check]
  pipelines:
    # traces:
    #   receivers: [otlp]
    #   processors: [batch]
    #   exporters: [debug, zipkin, otlp]
    metrics:
      receivers: [otlp, hostmetrics]
      processors: [resourcedetection/docker, batch]
      exporters: [debug, prometheus, otlp]
    logs:
      receivers: [filelog]
      processors: [batch]
      exporters: [otlp, debug]
  telemetry:
    metrics:
      readers:
        - pull:
            exporter:
              prometheus:
                host: '0.0.0.0'
                port: 8888
